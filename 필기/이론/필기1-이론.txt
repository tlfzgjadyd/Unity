참고
https://docs.unity3d.com/Manual/class-GameObject.html
===================================
using UnityEngine;
System.Collections;
public class Name : MonoBehaviour
{
	void Start()
	{
		
	}
}
===================================
키 누르는거

getKeyUp
===================================
자료형 : int, bool(true, false 소문자)
===================================
반복문중에  for each
        foreach(string item in strings)
        {
            print (item);
        }
===================================
출력문

Debug.Log ("I'm about to hit the ground!" + i );
print("Hello World");
===================================
배열
        string[] strings = new string[3];
        
        strings[0] = "First string";
        strings[1] = "Second string";
        strings[2] = "Third string";
===================================
접근지정자 똑같음
private 명시 안하면 이거됨 클래스 내부범위 접근 가능
바깥에서는 public 범위의 변수에만 접근 가능하다
===================================
다른 클래스의 public함수 사용 예시
myOtherClass.FruitMachine(alpha, myOtherClass.apples);
===================================
Awake와 Start의 차이점
awake는 스크립트 enabled아니어도 실행됨
스크립트간의 참조나 초기화
start는 update함수 실행직전에만 실행되는데
스크립트가 enabled 상태일때만 실행된다
그래서 이 스크립트가 enabled됐을때 필요한 것들을 쓰면됨

awake : 맨 처음부터
start : 필요할때만 가능
start함수를 다시 돌릴 순 없지만 변수 enable로 가능
맨 처음에는 awake만 보이는데 enable시 둘다 되는걸 볼 수 있음

공통점은 둘다 스크립트 생명주기 내에서 한번만 실행된다는 점이다
그래서 스크립트를 disenabled 하거나 re-enabled하더라도 다시 실행되지 않음
===================================
update와 fixed update의 차이점
Update() : 정규 시간에 불리지 않음, 다음 콜과의 간격이 달라짐 
FixedUpdate() : 정규시간에 불림, 다음 콜과의 간격이 일정함
fixedupdate불린 다음에 
anything affects rigid body = physics object
should be executed in fixed update rather than update

"물리 엔진은 자기 스스로 정확한 시간에 동작합니다.
이러한 이유 때문에 FixedUpdate는 반드시 힘을 가하거나, 회전을 계산하거나,
또는 물리 계산 관련 함수에 사용이 되어야 합니다.
Update()는 물리 엔진과 다르게 작동하기 때문에, 
렌더링 엔진에서 얼마나 많은 그래픽 리소스를 로드하는지에 따라 느려지거나
빨라지기 때문에 일정하지 않은 시간에 물리적 충돌을 일으킬 수 있습니다." 
즉, Rayhit나 Physics 충돌들은 일정한 주기로 체크가 되어야하는데
Update()는 그에 어울리지 않는 함수라는 것이다.
===================================
마법사를 써라
ctrl shift m 누르면 마법사 뜬다
원하는 메소드 검색하고 여러개 선택해서 ok하면 다뜸
이러면 자동완성이라 에러줄어들음
===================================
벡터 사용

2point벡터 : x, y로 구성
이 벡터의 길이 : magnitude라고 부름
길이는 구할수있지

velocity를 가지는 경우 예시
지금은 5,6에 있지만
12, 5 per hour의 velocity를 가지면 한시간 후에는 17, 11이 되겠지

손가락을  L로 펴고 중지펴면 중지가 z임

 vector3.magnitude로 이런 연산 도와줌
두 벡터 A(x, y, z)와 B(x, y, x)가 있다고 치자
이 둘을 곱하면 
(A의 x랑 B의 x 곱한것) +(A의 y랑 B의 y 곱한것)  + (A의 z랑 B의 z  곱한것)
이렇게 되는데 이럴 경우 dot product로 값이 나오게 된다

곱했더니 0나오니까 수직이겠지  
----------------------
이것의 사용 예시

비행기가 날고있다 
비행기의 진행 앞쪽 벡터랑 지면에서 수직인 벡터랑 0나오면
똑바로 날고있다는건데 만약에 값이 다르면 비행기가 기울어있다는 뜻이겠지
-면 밑으로 기운거고 +면 위로 기운거다

유니티는 Vector3.Dot(VectorA, VectorB)로 도와준다
===================================
cross product

A^B=C
이럴 경우 B는 손모양 했을때 y축
A는 x축 C는 z축에 해당한다고 보면 된다

벡터간에 cross product를 하게 되면 값이 나오는게 아니라
또다른 벡터가 나오게된다 그것이 c임
c는 A에도 수직 b에도 수직인 벡터이다
이건 뭐야 실제로 해보니까 약간 신발끈정리처럼 나옴

여기서 쓰이는 유니티는 Vector3.Cress(VectorA, VectorB)이다
===================================
enable flag

그냥 enable flag 써라
예시 if~
myLight.enabled=!myLight.enabled;
내 불빛 켜져있으면 꺼라
이렇게 토글방식으로 누를때마다 바뀌게 가능하다
===================================
SetActive

setActive를 통해 object on off도 가능하다
 
gameObject.SetActive(false);
Start함수 안에 있으니까 시작할때 작동안함

이때 주의할점은 부모가 active여아 child도 active 가능
체크박스 누르는걸로 deactivate도 가능

이때 gameObject란 무엇인가?
https://vonstage.tistory.com/9
Scene에 보이는 모든 객체는 GameObject를 상속 받아서 만들어 집니다.
그래서 GameObject가 유니티를 다루는 핵심적인 객체입니다.
그럼 여기서 생성 된 GameObject에 Script를 추가해 보겠습니다.
생성한 GameObject는 Component로 Script를
추가할 수 있습니다. 그러면 그 GameObject는 Script대로
동작하게 되고 또는 Script를 통해 GameObject를 조작한다

그럼 이제 추가적으로 GameObject의 함수들을 살펴 보겠습니다.
가장 많이 쓰는 GameObject.Find("object_name") 이 함수를 통해서
object_name으로 GameObject를 찾을 수 있습니다.
Unity에서는 전역처럼 모든 곳에서 object_name으로
생성 된 GameObject를 찾을 수 있습니다.
그리고 name property를 통해서 이름을 설정 할 수 있습니다.
또한 tag도 설정할 수 있습니다.
tag는 나중에 GameObject를 선별할 때 사용합니다.
GameObject cube = GameObject.Find("Cube");
cube.name = "cube";
cube.tag = "rotating_cube";
이런 식으로 구별 이름을 정할 수 있습니다.
그리고 위 코드에 있는 transform을 통해서
position, rotate, scale을 변경 할 수 있습니다.													조작할 수 있습니다.
===================================
translate & rotate
위치와 회전을 결정하기
translate함수 안에는 vector3를 받음
transform.Translate(new Vector3(0, 0, 1));

주로 하는건 
public float moveSpeed = 10f;
transform.Translate(Vector3.forward * moveSpeed * Time.deltaTime);
이렇게 하여 meters per fram단위로 움직이던걸(엄청 빨리돌아감)
meters per second로 바꿀 수 있다
이러면 좌표 3개 직접 안찍고 vector3.forward의 shortcut 사용 가능

근데 만약 이런 프레임어쩌고가 아니라
키 누르는것에 의해 작동하게 만들고 싶다면 어떻게 해야할까?
if(Input.GetKey(KeyCode.UpArrow))
	transform.Translate(Vector3.forward * moveSpeed * Time.deltaTime); 
이러면 방향키 눌렀을때 앞으로 간다

음수로 주기는 Vector3.forward 앞에 -붙인다
if(Input.GetKey(KeyCode.UpArrow))
	transform.Translate(-Vector3.forward * moveSpeed * Time.deltaTime); 
이러면 방향키 눌렀을때 뒤로간다

이번엔 이걸 사용해볼거임
새로운 shortcut
public float turnSpeed = 50f;
transform.Rotate(Vector3.up, -turnSpeed * Time.deltaTime);
도는 양이 두번째 argument

이것들은 주로 전역보단 지역으로 움직인다
===================================
public Transform target; //이것은 우리가 바라보고자 하는 물체이다
transform.LookAt(target);
이때 화면 조작을 하는데 LemonHead를 오른쪽에있는 Target에다가 드래그해서 놓네
이때 왼쪽 위에서 global local 토글이 가능한데
===================================
선형보간
Lerp함수로 두 값사이의 를 얻을 수 있다
예를들어 3과 5를 선형보간시 4얻을 수 있음
-------------------------
Mathf.Lerp는 다음과 같다
float result = Mathf.Lerp(3f, 5f, 0.5f);
이때 3번째 전달인자는 보간값이다 지금은 0.5즉 50%니까
3과 5사이의 50%지점인 4가 나오겠지
0이면 첫번째 인자값이 나가고 1이면 두번째 인자값이 나감 보간 구할때 그렇게되니까
-------------------------
Vector3.Lerp는 다음과 같다

 Vector3 from = new Vector3 (1f, 2f, 3f);	//from변수로 벡터 넣음
Vector3 to = new Vector3 (5f, 6f, 7f);		//to변수로 벡터 넣음

// Here result = (4, 5, 6)
Vector3 result = Vector3.Lerp (from, to, 0.75f); //from, to를 Vector3.Lerp에 집어넣음
보간값은 0.75f니까 1f와 5f의 0.75지점인 4
2f와 6f의 0.75지점인 5,
3f와 6f의 0.75지점인 6
따라서 답은 (4, 5, 6)으로 나오게 된다
-------------------------
Color.Lerp는 다음과 같다
동일한 원칙이 적용된다니까 from to에 벡터들어가는데
rgb색상이 포함되어 들어가겠지
-------------------------
light.intensity 에 사용을 해보자
light.intensity = Mathf.Lerp(light.intensity, 8f, 0.5f);
이때 만약 light intensity가 0에서 시작했다면 from = 0 
to = 8f니까 0.5 보간에 의해 4값이 대입된다
그런 다음엔 4와 8의 0.5인 6으로 설정된 다음 계속 바뀌는 식이다
이때 8에 가까워질수록 바뀌는 폭이 줄어든다
그런데 이것은 여러 프레임의 과정에서 발생하니까
프레임 속도에 의존하여 변경속도 바뀌는걸 원하지 않는다면 이런 코드를 사용할 수 있다
light.intensity = Mathf.Lerp(light.intensity, 8f, 0.5f * Time.deltaTime);
이러면 프레임당 강도변경을 초당 변경으로 바꿀 수 있다

값을 부드럽게 하려면 SmoothDamp.기능을 쓰라는데 이거 설명은 안하고 끝남
===================================
destroy
런타임에 객체 제거 가능
근데 이때 작동 방식이 갈리는거같음
굳이 분류를 한걸 보면 다르긴할듯
------------------------------
1. 그냥 누르면 자기자신 제거(?)
 if(Input.GetKey(KeyCode.Space))
        {
            Destroy(object);
        }
------------------------------
2. 다른 object 제거
public GameObject other;

 if(Input.GetKey(KeyCode.Space))
        {
            Destroy(other);
        }

이래놓고 화면을 조작하는데 원하는 물체 이름을 더 오른쪽의 other 옆에 드래그
해서 떨굼 그럼 그것으로 인식이 된다
------------------------------
3. 직접 컴포넌트 알려줌
if(Input.GetKey(KeyCode.Space))
        {
            Destroy(GetComponent <MeshRenderer>());
        }
MeshRenderer컴포넌트를 제거할건데
이게 특정 컴포넌트에 정해진 이름인건지 이사람이 임의로 지정한건지는 모르겠음
이제 이건 destroy했으니까 더이상 렌더링되지 않는다
-------------------------------
+ 3초간 딜레이 후에 제거하기

두번째인자로 딜레이 시간을 주면 된다
 if(Input.GetKey(KeyCode.Space))
        {
            Destroy(object, 3f);
        }
===================================
KeyCode.space

edit상단바->project settings->input
여기 보면 여러개있지
이중 jump라고 이름준거 보면 positive button자리에 space가 있음
 space바 누르면 jump 버튼이라고 이름이 인식된다

GetButton계열의 함수들은 버튼이 눌리고 있으면 true, 
안눌리고 있으면 false를 리턴한다 

GetKey 계열의 함수들도 똑같이 작동한다

bool down = Input.GetKeyDown(KeyCode.Space);
bool down = Input.GetButtonDown("Jump");
이런식으로 key와 버튼을 처리하고
이후에 if(down) else if(held) 이런식으로 됨
held는 버튼 계속 눌리고있을때겠지
===================================
GetAxis

GetButton GetKey랑 비슷하게 동작함
그러나 저 둘은 bool값 리턴하는 반면
Get Axis는 -1~1 사이값 을 리턴한다

아까 edit에서 메뉴해서 input 들어갔던거 기억나지
그렇게 들어가면 되는데
아까는 positive button자리에 space만 있었고 negative는 고려를 안했었잖아
근데  GetAxis는 리턴값이 음수도 가능하므로  negative버튼값도 고려해야해
그리고 gravity, dead, sensitivity, snap도 고려해야한다
-------------------------------
gravity : how fast the scale returns to zero after the button has been released
gravity 클수록 빨리 돌아감
그래서 예시화면 보여줄때 gravity가 큰값일때 -1과 1사이 이동하는 속도가 빨라졌다
가운데에 0값이 있으니까
-------------------------------
sensitivity : gravity 반대성질로 -1, 1로 얼마나 빨리 돌아가냐이다
아깐 1이랑 -1에서 0으로 돌아갈때의 속도였다면
이번엔 0에서 1, -1로 이동할때의 속도인거지
-------------------------------
dead
만약 조이스틱으로 이동한다면 엄청 작은 움직임에는 이동하고 싶지 않을것이다
이걸 피하기 위해 dead zone이 존재함
dead값이 클수록 dead zone이 커지고
dead zone내에선 조이스틱 움직여도 움직임 안됨
그래서 움직이려면 조이스틱 많이 움직여야한다
-------------------------------
horizontal, vertical value 받기
float h = Input.GetAxis("horizontal");
float v = Input.GetAxis("Vertical");
===================================
OnMouseDown
이건 GUI 에서 움직이는거 감지 가능
rigid 엄격한

예시를 들어보자 우린 문 object를 가지고있어
그리고 box colider가지고있고
rigid body가 붙어있다
그러기 위해서는 리지드바디 가 무엇인지 이해해야 합니다 . 
리지드바디는 게임오브젝트가 실시간 물리학 에 반응할 수 있게 해주는 구성요소입니다 . 
여기에는 힘과 중력, 질량, 항력 및 운동량에 대한 반응이 포함됩니다.
===================================
private Rigidbody rb;

private void Awake()
{
	rb = GetComponent<Rigidbody>();
}

void OnMouseDown()
{
	rb.AddForce(-transform.forward * 500f);
	rb.useGravity=true;
}

이때 AddForce를 문방향의 반대방향으로 주었다
(클릭한 방향이 아니라 문이 서있는 방향이 맞는것같음)
-가 transform.forward에 붙어있지
그러므로 문에 방향의 반대로 힘이 가해짐
그래서 문을 클릭할 경우 문이 부서지면서 앞으로 날아간다
===================================
유니티에서 스크립트는 custom 컴포넌트로 간주된다
우린 GetComponent를 통해 다른 스크립트나 컴포넌트에 접근이 가능하다

실험을 해보자
스크립트는 총 3개
1: UsintOtherComponents
2: AnotherScript
3: YetAnotherScript

각자 내부에 public 변수를 하나씩 가지고있다
그 변수는 다음과같다
1: public GameObject othergameobject;
2: public int playerScore = 9001;
3: public int numberOfPlayerDeathe=3;

이때 1번 스크립트에서 2, 3번 스크립트를 사용할 것이기 때문에
1번 스크립트에는  private 변수가 2개 추가로 더있다
private AnotherScript anotherScript;
private YetAnotherScript yetAnotherScript;
각자 타입명이 스크립트 이름이랑 같음
왜 이렇게했냐면 각자 스크립트에 있는 진짜를 가져다 쓰는게 아니라
이 스크립트에 쓰여진 클래스의 instance만을 사용하는 것이기 때문이다

스크립트1
   void Awake ()
    {
        anotherScript = GetComponent<AnotherScript>();
        yetAnotherScript = otherGameObject.GetComponent<YetAnotherScript>();
        boxCol = otherGameObject.GetComponent<BoxCollider>();
    }
Awake함수에선 변수들을 초기화한다
이때 GetComponent를 사용하여 실제 값을 가져다가 변수에 대입하고있지
여기서 anotherScript 변수를 보자
<>안에 있는건 타입이다 AnotherScript라는 자료형의 컴포넌트를 가져오겠다는 뜻이다

근데 yetAnotherScript는 좀 다르게 대입하네
이거는 정확히 뭘 가져오는지는 모르겠다
애초에 Game object가 import된적이 없음
===================================
GetComponent는 다른 스크립트 쓸때 굉장히 많이 쓰임
그리고 API에 의해 노출되지 않은 컴포넌트 접근시에도 사용된다
예를들어 collider 라고 직접 타이핑해서 접근한 collider는
구체적인  collider가 아니다
private BoxCollider boxCol;

SphereCollider는 BoxCollider과는 다른 속성값들을 가진다
그렇기에 저런식으로 가져옴
boxCol = otherGameObject.GetComponent<BoxCollider>();
Awake에서 이렇게 가져온 다음 Start에서 boxCol.size=new Vector3(3, 3, 3); 
이렇게 가져온다
===================================
델타타임
delta time : differences between two values
delta time property of time class는 각 업데이트나 fix update
함수 호출할때 사이의 시간이다

이걸로 움직임 스무스하게 바꾸거나 incremental 계산하기 좋음
프레임별로 긴 프레임이 있고 짧은 프레임이 있는데
프레임 길이에 의존하지 않기 때문에
프레임  길이가 다르더라도 일정하게 스무스한 움직임을 보여준다
이렇게 쓰면 프레임 단위가 아니라 초단위로 움직일 수 있게 됨
아 이게 뭔말인지 알았다

if(Input.GetKey(KeyCode.RightArrow))
            transform.position += new Vector3(speed * Time.deltaTime, 0.0f, 0.0f);
이런식으로 델타타임 사용시 스무스한 이동이 가능했다
===================================
value타입과 reference타입이 있음
value타입 안에는 int, float, double, bool, char. Structs가 있고

unity에서 구조체에 해당하는건 Vector3, Quaternion
클래스의 object에 해당하는건 다 reference 타입이라고 보면 된다

Reference 타입 안에 Classes로는 
Transform, Gameobject가 있다

value타입은 값가지고
reference타입은 메모리 주소 가진다

예시를 들어보자

        //Value type variable
        Vector3 pos = transform.position;
        pos = new Vector3(0, 2, 0);
        
        //Reference type variable
        Transform tran = transform;
        tran.position = new Vector3(0, 2, 0);

Vector3는 value 타입이니까 값만 복사되는 반면
Transform은 reference타입이니까 주소가 복사되어 변경사항이 적용된다
===================================
생성자

    public class Stuff
    {
        public int bullets;
        public int grenades;
        public int rockets;
        
        public Stuff(int bul, int gre, int roc)
        {
            bullets = bul;
            grenades = gre;
            rockets = roc;
        }

        public Stuff()
        {
            bullets = bul;
            grenades = gre;
            rockets = roc;
        }
    }

CTOR이라고 치고 tab치면 빠르게 가능하다는데
생성자가 생기는것같음
===================================
instantiate는 클론 만드는것에 쓴다
prefab : preconfigured object .which is saved in project asset
Instantiate(클론하고싶은 대상);
근데 이러면 디폴트로 인스턴스화 하겠다는 뜻이다

public Transform barrelEnd; 만들어놓고
Instantiate(클론하고싶은 대상, barrelend.position, barrelend.rotation);

근데 이러면 그냥 굴러떨어질 뿐이다
그러나 우리는 클론에 대해 제어를 하고싶음
일반적으로 Instantiate는 object타입을 리턴함
하지만 우리는 force도 추가하고 fire시켜야하기에
Rigidbody형태로 강제캐스팅할거다
캐스팅해서 만든 다음에
AddForce를 할수가 있음
이제 rigidbody형태니까 거기서 사용가능한건 다 쓸 수 있다

Rigidbody rocketInstance;
rocketInstance = Instantiate(rocketPrefab, barrelEnd.position, barrelEnd.rotation) as Rigidbody;
rocketInstance.AddForce(barrelEnd.forward * 5000);
이럼 위로 튀어오른 다음에 떨어진다
===================================
배열

이때 주의해야하는 점은 배열은 자료형이 아니라
단순히 여러 자료형을 모은 collection이라는 것이다

int[] myIntArray = new int[5];

myIntArray[0]=12;

int[] myIntArray = {12, 76, 8, 937, 903};

players = GameObject.FindgameObjectsWithTag("Player");
이러면 player태그 가진 objects 다 담아서 배열로 리턴한다
===================================
start메소드 안에 Invoke메소드(대상함수 , delay)를 통해 시간차  invoke가 가능하다
    void Start()
    {
        Invoke ("SpawnObject", 2);
    }
    
    void SpawnObject()
    {
        Instantiate(target, new Vector3(0, 2, 0), Quaternion.identity);
    }

반복해서 invoke할수도 있다
InvokeRepeating("SpawnObject", 2, 1);
이러면 1번째는 invoke 대상
2번째는 부르기 전에 delay
3번째는 각 반복 사이의 간격에 해당한다
===================================
enumerations = enum에 해당함

enum Direction {North, East, South, West};
이때 각자 0부터 시작하는 값을 가져서 North는 0값을 가지고 그런 식이다

만약 이렇게 한다면
enum Direction {North=1, East, South, West};
East는 2값을 가지고 
South는 3값을 가지고 그런식이다

만약 이렇게 한다면
enum Direction {North=10, East=11, South=15, West=27};
------------------
enum의 타입을 바꿀수도 있다
enum Direction : short  {North, East, South, West};
이러면 int 대신 short타입으로 enum값이 형성된다
------------------
사용하기
이제 0, 1, 2, 3값 대신 North, East 등을 사용할 수 있다
Direction myDirection;으로 만들어준 다음
myDirection = Direction.North;
------------------
우린 이런 함수도 만들 수 있다
dir를 받아서 반대방향을 리턴해줄거임
Direction ReverseDirection(Direction dir)
{
	if(dir ==Direction.North)
		dir = Direction.South;
.
.
.
return dir;
}
이런식
===================================
switch문
 void Greet()
    {
        switch (intelligence)
        {
        case 5:
            print ("Why hello there good sir! Let me teach you about Trigonometry!");
            break;
        case 4:
            print ("Hello and good day!");
            break;
        case 3:
            print ("Whadya want?");
            break;
        case 2:
            print ("Grog SMASH!");
            break;
        case 1:
            print ("Ulg, glib, Pblblblblb");
            break;
        default:
            print ("Incorrect intelligence level.");
            break;
        }
}
